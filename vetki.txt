Сегодняшняя тема — работа с ветками и слияние изменений.
План урока:
•	что такое ветки;
•	как работать с ветками: как мы можем их создавать, изменять;
•	что такое слияние веток и удаление веток.
Ветка в Git — это набор коммитов, расположенных в хронологическом порядке. У каждой ветки есть своё название. Основная ветка чаще всего называется master или main, она появляется при инициализации репозитория и считается главной веткой проекта.

Коммит — сохранение, фиксация изменений в проекте.

Ветки позволяют разработчикам параллельно работать над задачами. Ветки можно использовать лично и при совместной работе.
•	работая над проектом самостоятельно, мы можем держать в главной ветке полноценный рабочий код, а в дополнительных ветках экспериментировать;
•	при совместной работе каждый разработчик вносит изменения в “своих” ветках.
Новые ветки создаются для изолированной разработки различных функциональностей, экспериментов, для работы над определёнными задачами (исправление ошибок). Это позволяет разработчикам вносить изменения без риска нарушения стабильности основной ветки проекта.
Создаём репозиторий:
1.	Открываем GitHub Desktop.
2.	Нажимаем на стрелочку вниз рядом с названием существующего репозитория.
3.	Нажимаем на кнопку Add.
4.	Нажимаем на кнопку Create New Repository….
5.	Заполняем поле Name, запоминаем расположение репозитория, ставим галочку Initialize this repository with a README, указываем Python в поле Git Ignore, указываем MIT License в поле License. нажимаем на кнопку Create Repository.
6.	Нажимаем на кнопку Publish repository.
7.	Нажимаем на кнопку Publish Repository.
Добавляем папку .venv:
1.	Нажимаем на кнопку Open in PyCharm.
2.	Нажимаем на кнопку Trust Project.
3.	Нажимаем правой кнопкой мыши на название папки. Выбираем New — Python File
4.	Записываем название файла: test.py. Нажимаем на кнопку Add, чтобы добавить файл в Git. Если название файла сверху стало зелёным, то файл успешно добавился.
5.	В правом нижнем углу нажимаем на Python 3.12.
6.	Нажимаем Add New Interpreter — Add Local Interpreter.
7.	Нажимаем на кнопку OK.
Дополняем список того, что нужно игнорировать:
1.	В PyCharm открываем файл .gitignore.
2.	Удаляем # перед .idea/.
Сохраняем коммит в главную ветку:
1.	Пишем код.
2.	Переходим в GitHub Desktop.
3.	В левом нижнем углу записываем название коммита и описание сделанных изменений. Нажимаем на кнопку Commit to main.
4.	Нажимаем на кнопку Push origin.
Создаём новую ветку:
1.	Переходим в GitHub Desktop.
2.	Сверху нажимаем на Current Branch.
3.	Нажимаем на кнопку New Branch.
4.	Пишем имя ветки: newbranch.
Обычно ветки называются в зависимости от функционала или по имени разработчика, или как-то ещё.
5.	Нажимаем на кнопку Create Branch.
6.	Нажимаем на кнопку Push branch.
Теперь, если мы зайдём на сайт, то сможем выбирать между ветками.
Работаем с веткой:
1.	Нажимаем на кнопку Open in PyCharm.
2.	Добавляем код.
3.	Переходим в GitHub Desktop.
4.	В левом нижнем углу записываем название и описание коммита. Нажимаем на кнопку Commit in newbranch.
5.	Нажимаем на кнопку Push origin.
6.	Переходим на сайт. Переключаемся между ветками и смотрим, как в них выглядит test.py.

Слияние веток
Ветвление позволяет отделить готовый код проекта от функционала, который находится в стадии разработки и тестирования. Когда разработчик завершил задачу в дополнительной ветке, ветку с новым кодом необходимо слить с основной. Сделать это можно с помощью команды git merge или Pull Request.

Слияние веток объединяет код, берёт код из дополнительной ветки и добавляет его в основную ветку.

Pull Request — функция, которая предоставляется не самой системой Git, а GitHub. Она позволяет отправлять запросы владельцу репозитория для объединения изменений с основной веткой. Владелец репозитория рассмотрит изменения и решит, хочет ли их добавить.

Pull Request считается социальным механизмом: позволяет разработчикам обсуждать изменения, проводить рецензии кода, добавлять исправления или улучшения. Pull Request используют при командной работе, поскольку при самостоятельной работе ни у кого не нужно ничего спрашивать.

При работе в команде владельцем репозитория считается Senior, он проверяет все изменения и потом даёт добро на добавление изменение (или просит сперва что-то исправить).

Pull Request содержит в себе информацию, в том числе мета-информация об автоматизированных тестах. В этой функции содержится вся информация о ветках, которые участвуют в слиянии.

Pull Request — это последовательность шагов: запрос отправляется, рассматривается, принимается, добавляется или нет.

Git merge — это команда, которая существует в самом Git. Это процесс, при котором изменения из одной ветки включаются в другую. Это техническая операция, которая может быть выполнена разработчиком локально, на компьютере или на сервере.

При слиянии с помощью merge Git пытается автоматически объединить изменения из разных веток. Могут случаться конфликты, которые Git предлагает устранить автоматически.

Merge — часть процесса обработки Pull Request, часть из его шагов.
Если мы не закоммитим изменения в ветке и перейдём в другую ветку, а потом вернёмся, то PyCharm предложит восстановить внесённые изменения.
Способы переключения между ветками:
•	нажимаем на название ветки в верхней панели PyCharm;
•	выбираем ветку в GitHub Desktop;
•	выбираем ветку на сайте.
Соединяем ветки с помощью merge:
1.	Вносим изменения в ветку newbranch и создаём коммит.
2.	Переходим в ветку main.
3.	В GitHub Desktop на панели сверху нажимаем Branch.
4.	Выбираем Merge into Current Branch…
5.	Выбираем ветку newbranch в списке.
6.	Нажимаем на кнопку Create a merge commit.
7.	Нажимаем на кнопку Push origin.
Клонирование репозитория нужно, когда при командной работе нужно взять себе общий проект. Перед этим создатель репозитория отправит collaborate — приглашение для совместной работы.
1.	В GitHub Desktop в левом верхнем углу нажимаем на название репозитория.
2.	Нажимаем на кнопку Add.
3.	Выбираем Clone Repository…
4.	Выбираем из списка нужный репозиторий.
5.	Нажимаем на кнопку Clone.
6.	Чтобы начать работу с репозиторием, нажимаем на кнопку Open in PyCharm.
7.	Создаём файл Python и папку .venv. В файле .gitignore удаляем # перед .idea.
8.	Создаём и пушим коммит.
Работаем с Pull Request:
1.	Заходим в GitHub Desktop.
2.	В левом верхнем углу нажимаем на Branches.
3.	Нажимаем на кнопку New Branch.
4.	Записываем название new и нажимаем на кнопку Create Branch.
5.	Нажимаем на кнопку Publish Branch.
6.	Заполняем главную ветку кодом. Создаём и пушим коммит.
7.	Переходим в ветку new. Создаём новый файл Python. Заполняем его кодом, создаём и пушим коммит.
8.	Заходим на главную страницу GitHub с репозиторием.
9.	Нажимаем на кнопку Commits.
Коммиты следует называть так, чтобы по названию было понятно содержание выполненной работы.

10. В левом верхнем углу нажимаем на Code.
11. В правом верхнем углу окна репозитория нажимаем на кнопку Compare & pull request.
Также можно использовать кнопку Create Pull Request в GitHub Desktop.

12. Сверху появилась зелёная галочка Able to merge. Она означает, что при слиянии не может быть никаких ошибок. Если будет красный крестик — найдены потенциальные ошибки. Ошибки нужно будет исправить самостоятельно. Записываем заголовок.
13. Нажимаем на кнопку Create pull request.
14. Нажимаем на кнопку Merge pull request.
15. Нажимаем на кнопку Confirm merge.
16. Получаем предложение удалить ветку new, так как в одном проекте у нас теперь две практически идентичные ветки. Чтобы удалить ветку, нажимаем на предложенную кнопку Delete branch. Либо же заходим в раздел Code, открываем Branches, находим ветку и нажимаем на мусорную корзину.

Создание файла README
При создании нового репозитория мы создаём файл README. 
Его обязательно нужно создавать для полноценных проектов, которые будут использованы в резюме.
В файле README написана документация, как пользоваться проектом, что в нём можно делать. Обычно этот файл создают для сложных проектов, для простого проекта в файле README можно расположить простое описание проекта.
Чтобы заполнить файл README, нужно знать синтаксис языка Markdown.
Если заполнить README обычным текстом, его мало кто будет читать, потому что все привыкли к хорошо оформленным документациям. С помощью Markdown можно сделать нужное оформление.
1.	Заходим в PyCharm.
2.	Открываем файл README.md.
3.	В правом верхнем углу переключаем режим с Preview на Editor and Preview.
4.	Знаком # обозначаем заголовок 1 уровня (самый крупный), ## — 2 уровня, ### — 3 уровня. Всего существуют 6 уровней заголовков. # ставим перед текстом и отделяем от текста пробелом.
5.	Чтобы текст переносился на следующую строчку, отделяем его двумя Enter. Если текст написан (условно) в 3 и 4 строке, он отображается одним абзацем, если в 3 и 5 — разными абзацами.
Чтобы текст переносился на следующую строчку, также можно ввести перед ним тег <br/>. Тогда текст отобразится не в новый абзац, а на новую строку.

6. Оформляем слово курсивом, ставим звёздочки (*) или подчёркивания (_) по обе стороны слова: *слово*/_слово_.
Вместо * можно использовать _, но * популярнее.

7. Оформляем слово жирным, ставим по две звёздочки по обе стороны слова: слово/слово.
8. Чтобы сделать слово жирным курсивом, используем три звёздочки: слово/слово.
9. Чтобы сделать списки, используем -, + или *. В отображении все эти символы заменятся точкой. Получится маркированный список.
← вот такой точкой.
10. Чтобы сделать нумерованный список, используем 1., 2. и т.д.
11. Чтобы сделать ссылку, помещаем “ссылочный” текст в [], следом в () вставляем ссылку. Так можно указывать ссылки на файлы проекта. Для этого нужно в () вставить название файла.
12. Чтобы отобразить картинку, находим картинку — щёлкаем правой кнопкой мыши — выбираем Копировать URL картинки — ставим ! — в [] пишем logo, а в () вставляем URL картинки.
13. Коммитим и пушим изменения.
На сайте GitHub будет отображаться то, что справа, а не код.



